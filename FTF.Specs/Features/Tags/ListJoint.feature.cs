// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.1.0.0
//      SpecFlow Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace FTF.Specs.Features.Tags
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.1.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("List Joint Tags")]
    public partial class ListJointTagsFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "ListJoint.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "List Joint Tags", "\tIn order to find notes related to specific tags\r\n\tI want to be able to list all " +
                    "the tags that have notes in common with a given set of tags", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 5
#line 6
 testRunner.Given("today is \'Feb 20 1984\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 7
 testRunner.And("I signup and signin as \'orodriguez\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("1 Notes, 3 Tags : Read(n1), Piano(n1), Empty()")]
        public virtual void _1Notes3TagsReadN1PianoN1Empty()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("1 Notes, 3 Tags : Read(n1), Piano(n1), Empty()", ((string[])(null)));
#line 9
this.ScenarioSetup(scenarioInfo);
#line 5
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Text"});
            table1.AddRow(new string[] {
                        "Empty"});
            table1.AddRow(new string[] {
                        "#Read a book about #Piano performance"});
#line 10
 testRunner.Given("I created the following notes:", ((string)(null)), table1, "Given ");
#line 14
 testRunner.When("I list all tags that joint the tag \'Read\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "NotesCount"});
            table2.AddRow(new string[] {
                        "Read",
                        "1"});
            table2.AddRow(new string[] {
                        "Piano",
                        "1"});
#line 15
 testRunner.Then("the tags list should match:", ((string)(null)), table2, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("3 Notes, 3 Tags : Read(n1, n3), Programming(n1, n2), FTF(n2, n3)")]
        public virtual void _3Notes3TagsReadN1N3ProgrammingN1N2FTFN2N3()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("3 Notes, 3 Tags : Read(n1, n3), Programming(n1, n2), FTF(n2, n3)", ((string[])(null)));
#line 20
this.ScenarioSetup(scenarioInfo);
#line 5
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Text"});
            table3.AddRow(new string[] {
                        "#Read article about #Programming"});
            table3.AddRow(new string[] {
                        "Write sample application #Programming #FTF"});
            table3.AddRow(new string[] {
                        "#FTF #Read about design principles"});
#line 21
 testRunner.Given("I created the following notes:", ((string)(null)), table3, "Given ");
#line 26
 testRunner.When("I list all tags that joint the tag \'Read\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "NotesCount"});
            table4.AddRow(new string[] {
                        "Read",
                        "2"});
            table4.AddRow(new string[] {
                        "Programming",
                        "1"});
            table4.AddRow(new string[] {
                        "FTF",
                        "1"});
#line 27
 testRunner.Then("the tags list should match:", ((string)(null)), table4, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("2 Notes, 3 Tags : Buy(n1), Car(n1), Mary(n2)")]
        public virtual void _2Notes3TagsBuyN1CarN1MaryN2()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("2 Notes, 3 Tags : Buy(n1), Car(n1), Mary(n2)", ((string[])(null)));
#line 33
this.ScenarioSetup(scenarioInfo);
#line 5
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "Text"});
            table5.AddRow(new string[] {
                        "#Buy tire #Car"});
            table5.AddRow(new string[] {
                        "#Buy gift for #Mary"});
#line 34
 testRunner.Given("I created the following notes:", ((string)(null)), table5, "Given ");
#line 38
 testRunner.When("I list all tags that joint the tag \'Mary\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "NotesCount"});
            table6.AddRow(new string[] {
                        "Mary",
                        "1"});
            table6.AddRow(new string[] {
                        "Buy",
                        "1"});
#line 39
 testRunner.Then("the tags list should match:", ((string)(null)), table6, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("0 Notes, 1 Tag")]
        public virtual void _0Notes1Tag()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("0 Notes, 1 Tag", ((string[])(null)));
#line 44
this.ScenarioSetup(scenarioInfo);
#line 5
this.FeatureBackground();
#line 45
 testRunner.Given("I created a tag with name \'SomeTag\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 46
 testRunner.When("I list all tags that joint the tag \'SomeTag\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "NotesCount"});
            table7.AddRow(new string[] {
                        "SomeTag",
                        "0"});
#line 47
 testRunner.Then("the tags list should match:", ((string)(null)), table7, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
